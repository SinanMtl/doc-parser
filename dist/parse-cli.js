#!/usr/bin/env node
import u from"fs";import p from"path";import{DocumentParser as f}from"./document-parser.js";function a(){console.log("\nDocument Parser - Extract meaningful text from JS, JSX, TS, TSX, Vue, and HTML files\n\nUsage:\n  doc-parse <directory|file> [options]\n\nOptions:\n  --output-json <file>    Export results to JSON file\n  --output-text <file>    Export results to text file\n  --help                  Show this help message\n\nExamples:\n  doc-parse ./src\n  doc-parse ./src --output-json results.json\n  doc-parse ./src --output-text results.txt\n  doc-parse ./components/Button.jsx --output-json button-texts.json\n\nSupported file types: .js, .jsx, .ts, .tsx, .vue, .html\n    ")}function g(e){const o={target:null,outputJson:null,outputText:null,showHelp:!1};for(let t=0;t<e.length;t++){const s=e[t];"--help"===s||"-h"===s?o.showHelp=!0:"--output-json"===s?(o.outputJson=e[t+1],t++):"--output-text"===s?(o.outputText=e[t+1],t++):!o.target&&!s.startsWith("--")&&(o.target=s)}return o}function x(){const e=process.argv.slice(2),o=g(e);if(o.showHelp||0===e.length)return void a();o.target||(console.error("Error: Please specify a file or directory to parse."),a(),process.exit(1));const t=p.resolve(o.target);u.existsSync(t)||(console.error(`Error: Path does not exist: ${t}`),process.exit(1)),console.log(`Parsing: ${t}`),console.log("Starting document parsing...\n");const s=new f;let n=[];try{const e=u.statSync(t);if(e.isDirectory())console.log("Parsing directory recursively..."),n=s.parseDirectory(t);else if(e.isFile()){console.log("Parsing single file...");const e=s.parseFile(t);e&&(n=[e])}console.log(`\nParsing completed! Found ${n.length} files.\n`);const l=s.generateSummary(n);if(console.log("=== SUMMARY ==="),console.log(`Total files processed: ${l.totalFiles}`),console.log(`Total meaningful texts found: ${l.totalTexts}`),console.log("\nFile types:"),Object.keys(l.fileTypes).forEach(e=>{console.log(`  ${e}: ${l.fileTypes[e]} files`)}),console.log("\nText types found:"),Object.keys(l.textTypes).forEach(e=>{const o=e;l.textTypes[o]>0&&console.log(`  ${e}: ${l.textTypes[o]} items`)}),l.allTexts.length>0&&(console.log("\n=== SAMPLE TEXTS (first 10) ==="),l.allTexts.slice(0,10).forEach((e,o)=>{console.log(`${o+1}. [${e.type}] ${e.file}: "${e.text}"`)}),l.allTexts.length>10&&console.log(`... and ${l.allTexts.length-10} more texts`)),o.outputJson){const e=p.resolve(o.outputJson);s.exportToJson(n,e)}if(o.outputText){const e=p.resolve(o.outputText);s.exportToText(n,e)}console.log("\nParsing completed successfully!")}catch(e){console.error(`Error during parsing: ${e.message}`),process.exit(1)}}x();export{x as main,g as parseArgs,a as showUsage};